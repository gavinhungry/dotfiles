[include]
  path = ~/.gitconfig.local
[commit]
  template = ~/.gitmessage
[color]
  ui = true
[push]
  default = simple
[log]
  date = iso-local
[alias]
  all = !sh -c 'find -L . -maxdepth 1 -type d ! -path . ! -name .git | sort | xargs -P8 -I{} git -C {} $@' -
  br = !sh -c 'git rev-parse --abbrev-ref HEAD 2> /dev/null' -
  clip = !sh -c 'git log -n1 --pretty=%B | xclip -selection c' -
  melog = !sh -c 'git log --author=$(git config user.email) $@' -
  origin = remote get-url origin
  pluck = "!sh -c 'DIR=$(basename \"${1%%.git*}\" 2> /dev/null); [ -n \"$DIR\" ] || exit 1; mkdir \"$DIR\" || exit 1; git -C \"$DIR\" init > /dev/null; git -C \"$DIR\" config core.sparseCheckout true; git -C \"$DIR\" remote add origin \"$1\"; echo \"$2\" >> \"$DIR\"/.git/info/sparse-checkout; git -C \"$DIR\" pull origin master --depth 1 || (rm -fr \"$DIR\"; exit 1)'" -
  rb = !sh -c 'git rebase -i HEAD~${1}' -
  remotes = !sh -c 'git remote -v | awk \"{ print \\$1OFS\\$2 }\" | sort -u | column -t' -
  show-patch = !sh -c 'git format-patch -1 $1 --stdout' -
  user = "!sh -c \"if [ $# -ne 1 ]; then echo "$(git config user.name) \\<$(git config user.email)\\>"; exit 0; fi; git config user.email "$(git config gituser.$1.email)" &> /dev/null; git user;\" --" -
  who = shortlog -ns
